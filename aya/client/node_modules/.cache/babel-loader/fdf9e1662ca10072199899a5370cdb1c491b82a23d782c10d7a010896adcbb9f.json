{"ast":null,"code":"var _jsxFileName = \"C:\\\\aya\\\\client\\\\src\\\\contexts\\\\WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState('0');\n  const [chainId, setChainId] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  useEffect(() => {\n    checkConnection();\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n  const checkConnection = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const accounts = await provider.listAccounts();\n        if (accounts.length > 0) {\n          setProvider(provider);\n          const signer = await provider.getSigner();\n          setSigner(signer);\n          const address = await signer.getAddress();\n          setAccount(address);\n          const balance = await provider.getBalance(address);\n          setBalance(ethers.formatEther(balance));\n          const network = await provider.getNetwork();\n          setChainId(Number(network.chainId));\n        }\n      } catch (error) {\n        console.error('Error checking wallet connection:', error);\n      }\n    }\n  };\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      throw new Error('MetaMask is not installed');\n    }\n    setIsConnecting(true);\n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      await provider.send('eth_requestAccounts', []);\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const balance = await provider.getBalance(address);\n      const network = await provider.getNetwork();\n      setProvider(provider);\n      setSigner(signer);\n      setAccount(address);\n      setBalance(ethers.formatEther(balance));\n      setChainId(Number(network.chainId));\n      return address;\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      throw error;\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n  const disconnectWallet = () => {\n    setProvider(null);\n    setSigner(null);\n    setAccount(null);\n    setBalance('0');\n    setChainId(null);\n  };\n  const switchToPolygon = async () => {\n    if (!window.ethereum) return false;\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x89'\n        }] // Polygon Mainnet\n      });\n      return true;\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainId: '0x89',\n              chainName: 'Polygon Mainnet',\n              nativeCurrency: {\n                name: 'MATIC',\n                symbol: 'MATIC',\n                decimals: 18\n              },\n              rpcUrls: ['https://polygon-rpc.com/'],\n              blockExplorerUrls: ['https://polygonscan.com/']\n            }]\n          });\n          return true;\n        } catch (addError) {\n          console.error('Error adding Polygon network:', addError);\n          return false;\n        }\n      }\n      console.error('Error switching to Polygon:', switchError);\n      return false;\n    }\n  };\n  const sendTransaction = async (to, value, gasLimit = 21000) => {\n    if (!signer) {\n      throw new Error('Wallet not connected');\n    }\n    try {\n      const tx = {\n        to,\n        value: ethers.parseEther(value.toString()),\n        gasLimit\n      };\n      const transaction = await signer.sendTransaction(tx);\n      return transaction;\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n      throw error;\n    }\n  };\n  const handleAccountsChanged = accounts => {\n    if (accounts.length === 0) {\n      disconnectWallet();\n    } else {\n      checkConnection();\n    }\n  };\n  const handleChainChanged = chainId => {\n    setChainId(parseInt(chainId, 16));\n    checkConnection();\n  };\n  const refreshBalance = async () => {\n    if (provider && account) {\n      try {\n        const balance = await provider.getBalance(account);\n        setBalance(ethers.formatEther(balance));\n      } catch (error) {\n        console.error('Error refreshing balance:', error);\n      }\n    }\n  };\n  const value = {\n    provider,\n    signer,\n    account,\n    balance,\n    chainId,\n    isConnecting,\n    connectWallet,\n    disconnectWallet,\n    switchToPolygon,\n    sendTransaction,\n    refreshBalance,\n    isConnected: !!account,\n    isPolygon: chainId === 137\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"cE1UXZu1wwzhd6GALW+MOPQH93c=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletContext","useWallet","_s","context","Error","WalletProvider","children","_s2","provider","setProvider","signer","setSigner","account","setAccount","balance","setBalance","chainId","setChainId","isConnecting","setIsConnecting","checkConnection","window","ethereum","on","handleAccountsChanged","handleChainChanged","removeListener","BrowserProvider","accounts","listAccounts","length","getSigner","address","getAddress","getBalance","formatEther","network","getNetwork","Number","error","console","connectWallet","send","disconnectWallet","switchToPolygon","request","method","params","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","addError","sendTransaction","to","value","gasLimit","tx","parseEther","toString","transaction","parseInt","refreshBalance","isConnected","isPolygon","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/aya/client/src/contexts/WalletContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nconst WalletContext = createContext();\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\nexport const WalletProvider = ({ children }) => {\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [balance, setBalance] = useState('0');\n  const [chainId, setChainId] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  useEffect(() => {\n    checkConnection();\n    \n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      \n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  const checkConnection = async () => {\n    if (window.ethereum) {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const accounts = await provider.listAccounts();\n        \n        if (accounts.length > 0) {\n          setProvider(provider);\n          const signer = await provider.getSigner();\n          setSigner(signer);\n          const address = await signer.getAddress();\n          setAccount(address);\n          \n          const balance = await provider.getBalance(address);\n          setBalance(ethers.formatEther(balance));\n          \n          const network = await provider.getNetwork();\n          setChainId(Number(network.chainId));\n        }\n      } catch (error) {\n        console.error('Error checking wallet connection:', error);\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    if (!window.ethereum) {\n      throw new Error('MetaMask is not installed');\n    }\n\n    setIsConnecting(true);\n    \n    try {\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      await provider.send('eth_requestAccounts', []);\n      \n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const balance = await provider.getBalance(address);\n      const network = await provider.getNetwork();\n      \n      setProvider(provider);\n      setSigner(signer);\n      setAccount(address);\n      setBalance(ethers.formatEther(balance));\n      setChainId(Number(network.chainId));\n      \n      return address;\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      throw error;\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const disconnectWallet = () => {\n    setProvider(null);\n    setSigner(null);\n    setAccount(null);\n    setBalance('0');\n    setChainId(null);\n  };\n\n  const switchToPolygon = async () => {\n    if (!window.ethereum) return false;\n\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x89' }], // Polygon Mainnet\n      });\n      return true;\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [\n              {\n                chainId: '0x89',\n                chainName: 'Polygon Mainnet',\n                nativeCurrency: {\n                  name: 'MATIC',\n                  symbol: 'MATIC',\n                  decimals: 18,\n                },\n                rpcUrls: ['https://polygon-rpc.com/'],\n                blockExplorerUrls: ['https://polygonscan.com/'],\n              },\n            ],\n          });\n          return true;\n        } catch (addError) {\n          console.error('Error adding Polygon network:', addError);\n          return false;\n        }\n      }\n      console.error('Error switching to Polygon:', switchError);\n      return false;\n    }\n  };\n\n  const sendTransaction = async (to, value, gasLimit = 21000) => {\n    if (!signer) {\n      throw new Error('Wallet not connected');\n    }\n\n    try {\n      const tx = {\n        to,\n        value: ethers.parseEther(value.toString()),\n        gasLimit\n      };\n\n      const transaction = await signer.sendTransaction(tx);\n      return transaction;\n    } catch (error) {\n      console.error('Error sending transaction:', error);\n      throw error;\n    }\n  };\n\n  const handleAccountsChanged = (accounts) => {\n    if (accounts.length === 0) {\n      disconnectWallet();\n    } else {\n      checkConnection();\n    }\n  };\n\n  const handleChainChanged = (chainId) => {\n    setChainId(parseInt(chainId, 16));\n    checkConnection();\n  };\n\n  const refreshBalance = async () => {\n    if (provider && account) {\n      try {\n        const balance = await provider.getBalance(account);\n        setBalance(ethers.formatEther(balance));\n      } catch (error) {\n        console.error('Error refreshing balance:', error);\n      }\n    }\n  };\n\n  const value = {\n    provider,\n    signer,\n    account,\n    balance,\n    chainId,\n    isConnecting,\n    connectWallet,\n    disconnectWallet,\n    switchToPolygon,\n    sendTransaction,\n    refreshBalance,\n    isConnected: !!account,\n    isPolygon: chainId === 137\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}